'{$STAMP BS2px, circleanim1.bpx}
' {$PBASIC 2.5}

' demonstrates correct latch and enable timing

' pin mappings
addr   VAR   OUTC
enable  VAR  OUT12
rdata  VAR  OUT0
gdata  VAR  OUT1
rgdata  VAR  OUTA
clock  VAR  OUT4
clockpin CON 4
latch  VAR  OUT5
latchpin CON 5
red CON 0
green CON 1
yellow CON 2

' set directions
DIRS = %0001111100110011
OUTS = %1111111111111111

w VAR Word
r VAR Word
b VAR Byte
i VAR Word
n VAR Nib

' parameters for DoFrame subroutine
frame VAR Byte
times VAR Byte
framebase VAR Byte
scanline VAR Byte
framecount VAR Byte
framecolor VAR Nib

startframe VAR Byte
endframe VAR Byte
framestep VAR Nib

' scratchpad ram frame 0=red 1=green
memframe VAR Bit

redframe CON 0
greenframe CON 1


clock = 0
latch = 0
enable = 0
rgdata = 0

STORE 2

framestep = 8

frame = 0
memframe = redframe
GOSUB GetFrameM

frame = 7
memframe = greenframe
GOSUB GetFrameM

times = 1

FOR w = 0 TO 63
RANDOM r
PUT w, r.LOWBYTE
NEXT

GOSUB ClearMemFrames

'''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''
main:
'''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''

GOSUB DoFrameMR

'memframe = 0
'GOSUB DoFrameM
'memframe = 1
'GOSUB DoFrameM

'GOTO main

'FOR w = 0 TO 63
'GET w, r
'r = r + 1
'PUT w, r
'NEXT

'GOTO main

'PUT 5, 17

'RANDOM r
'PUT r.LOWBYTE >> 2, r.HIGHBYTE
'GOTO main

RANDOM r
GET r.LOWBYTE >> 2, w
w = w | (1 << r.HIGHBYTE.LOWNIB)
PUT r.LOWBYTE >> 2, w

RANDOM r
GET r.LOWBYTE >> 2, w
w = w &  ~(1 << r.HIGHBYTE.LOWNIB)
PUT r.LOWBYTE >> 2, w

GOTO main


framecolor = red
times = 3
startframe = 0
endframe = 16
GOSUB DoFrameR

framecolor = green
GOSUB DoFrameR

framecolor = yellow
GOSUB DoFrameR


GOTO main


FOR frame = 0 TO 16
GOSUB DoFrameR
NEXT

framecolor = green
times = 4
FOR frame = 0 TO 16
GOSUB DoFrameR
NEXT

framecolor = yellow
times = 4
FOR frame = 0 TO 16
GOSUB DoFrameR
NEXT

GOTO main



DoFrame:
  framebase = frame << 4
  FOR scanline = framebase TO framebase + 15
    READ scanline << 1, Word w

  latch = 0
  enable = 1

    SHIFTOUT framecolor, clockpin, 1, [w \ 16]

  latch = 1
'  addr = scanline.LOWNIB
  enable = 0

  NEXT
RETURN

DoFrameT:
  framebase = frame << 4
  FOR framecount = 1 TO times
    FOR scanline = framebase TO framebase + 15
      READ scanline << 1, Word w

  latch = 0
  enable = 1

      SHIFTOUT framecolor, clockpin, 1, [w \ 16]

  latch = 1
'  addr = scanline.LOWNIB
  enable = 0

    NEXT
  NEXT

DoFrameR:
  FOR framecount = 1 TO times
    FOR frame = startframe TO endframe STEP framestep
      framebase = frame << 4
      FOR scanline = framebase TO framebase + 15
        READ scanline << 1, Word w
        latch = 0
        enable = 1
        SHIFTOUT framecolor, clockpin, 1, [w \ 16]
        latch = 1
'        addr = scanline.LOWNIB
        enable = 0
      NEXT
    NEXT
  NEXT
RETURN

' display the frame in scratch pad ram
' uses:
'   framebase, scanline, w
' inputs:
'   memframe 0-1, framecolor 0-2
'DoFrameM:
'  framebase = memframe << 4
'  FOR scanline = framebase TO framebase + 15
'    GET scanline << 1, Word w
'
'' use this timing for single pixels
''    latch = 0
''    enable = 1
'
'    SHIFTOUT framecolor, clockpin, 1, [w \ 16]
'
'      ' use this timing for video
'      enable = 1
'      PULSOUT latchpin, 1
'      addr = scanline.LOWNIB
'      enable = 0
'
'' use this timing for single pixels
''    latch = 1
''    addr = scanline.LOWNIB
''    enable = 0
'
'  NEXT
'RETURN

' display the the red and green scratchpad frames
' uses:
'   framebase, scanline, w
'DoFrameM2:
'  FOR framecolor = 0 TO 1
'    framebase = framecolor << 4
'    FOR scanline = framebase TO framebase + 15
'      GET scanline << 1, Word w
'      SHIFTOUT framecolor, clockpin, 1, [w \ 16]
'      ' use this timing for video
'      enable = 1
'      PULSOUT latchpin, 1
'      addr = scanline.LOWNIB
'      enable = 0
'    NEXT
'  NEXT
'RETURN

' display the the red and green scratchpad frames
' uses:
'   framebase, scanline, w
'DoFrameM22:
'  framebase = 0
'  FOR scanline = framebase TO framebase + 15
'    GET scanline << 1, Word w
'    SHIFTOUT red, clockpin, 1, [w \ 16]
'    enable = 1
'    PULSOUT latchpin, 1
'    addr = scanline.LOWNIB
'    enable = 0
'  NEXT
'  framebase = 16
'  FOR scanline = framebase TO framebase + 15
'    GET scanline << 1, Word w
'    SHIFTOUT green, clockpin, 1, [w \ 16]
'    enable = 1
'    PULSOUT latchpin, 1
'    addr = scanline.LOWNIB
'    enable = 0
'  NEXT
'RETURN


' display the the red and green scratchpad frames
' uses:
'   scanline, w
DoFrameM:
  enable = 0
  FOR scanline = 0 TO 15
    GET scanline << 1, Word w
    SHIFTOUT red, clockpin, 1, [w \ 16]
    PULSOUT latchpin, 1
    GET (scanline << 1) + 32, Word w
    SHIFTOUT green, clockpin, 1, [w \ 16]
    PULSOUT latchpin, 1
'    addr = scanline.LOWNIB
  NEXT
  enable = 1
RETURN

' display the the red and green scratchpad frames
' uses:
'   scanline, w
DoFrameMR:
  enable = 0
  FOR framecount = 0 TO times
    FOR n = 0 TO 15
      b = n << 1
      GET b, Word w
      SHIFTOUT red, clockpin, 1, [w \ 16]
      PULSOUT latchpin, 1
      GET b + 32, Word w
      SHIFTOUT green, clockpin, 1, [w \ 16]
      PULSOUT latchpin, 1
      addr = n
    NEXT
  NEXT
  enable = 1
RETURN

' display the the red and green scratchpad frames
' a number of times
' uses:
'   scanline, w, framecount
' inputs:
'   times
DoFrameMRold:
  FOR framecount = 0 TO times
    FOR n = 0 TO 15
      GET n << 1, Word w
      SHIFTOUT red, clockpin, 1, [w \ 16]
      enable = 0
      PULSOUT latchpin, 1
'      addr = scanline.LOWNIB
      enable = 1
      GET (scanline << 1) + 32, Word w
      SHIFTOUT green, clockpin, 1, [w \ 16]
      PULSOUT latchpin, 1
      enable = 0
'      addr = scanline.LOWNIB
      enable = 1
    NEXT
  NEXT
RETURN


' copy a frame from memory to scratchpad ram
' uses:
' current STORE, w, framebase, scanline
' inputs:
'   frame 0-63, memframe 0-1
GetFrameM:
  framebase = frame << 4
  FOR scanline = framebase TO framebase + 15
    READ scanline << 1, Word w
'    PUT (scanline.LOWNIB << 1) + (memframe << 5), Word w
    PUT (scanline << 1) + (memframe << 5), Word w
  NEXT
RETURN

' clear the scratchpad ram
ClearMemFrames:
  FOR w = 0 TO 64
    PUT w, 0
  NEXT
RETURN